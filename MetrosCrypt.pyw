# Standard libraries.
import os
import sys

# Encryption/Decryption Library.
import cryptocode

# Library for opening a link to the repository.
import webbrowser

# Window GUI.
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtPrintSupport import *

__version__ = 1.0


class IconBase64:
    '''
    The class responsible for the image. 
    Initially, the image is base64.
    '''

    # Password display icon in the input line.
    def showPassword():
        pixmap = QPixmap()
        pixmap.loadFromData(QByteArray.fromBase64(b''))
        icon = pixmap
        return icon

    # Password hiding icon in the input line.
    def hidePassword():
        pixmap = QPixmap()
        pixmap.loadFromData(QByteArray.fromBase64(b''))
        icon = pixmap
        return icon

    # The icon of the main window.
    def iconWindow():
        pixmap = QPixmap()
        pixmap.loadFromData(QByteArray.fromBase64(b''))
        icon = pixmap
        return icon


class Input(QLineEdit):
    '''
    The 'Input' class allows you to double-click on 
    widget to perform function that we will pass.
    '''
    clicked = pyqtSignal()

    def mouseDoubleClickEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.clicked.emit()
        else:
            super().mousePressEvent(event)


class Label(QLabel):
    '''
    The 'Label' class allows you to perform a function 
    when you click on widget that we will pass.
    '''
    clicked = pyqtSignal()

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.clicked.emit()
        else:
            super().mousePressEvent(event)


class Password(QLineEdit):
    '''
    The widget class is 'QLineEdit' which contains a password entry line.
    Show/hide password icon.
    '''

    def __init__(self):
        super().__init__()
        self.setEchoMode(QLineEdit.Password)
        self.show_password = QAction(
            QIcon(IconBase64.showPassword()), '', self)
        self.show_password.setCheckable(True)
        self.show_password.setVisible(False)
        self.addAction(self.show_password, QLineEdit.TrailingPosition)
        self.show_password.toggled.connect(self.showPassword)
        self.textChanged.connect(self.checkingInput)

    # Hide the icon if there is no text in the field.
    # Well, if there is a text, then show it.
    def checkingInput(self):
        if self.text() == '':
            self.show_password.setVisible(False)
        else:
            self.show_password.setVisible(True)

    # The function of showing/hiding the password.
    def showPassword(self):
        if self.show_password.isChecked() == True:
            self.setEchoMode(QLineEdit.Normal)
            self.show_password.setIcon(QIcon(IconBase64.hidePassword()))
        elif self.show_password.isChecked() == False:
            self.setEchoMode(QLineEdit.Password)
            self.show_password.setIcon(QIcon(IconBase64.showPassword()))


class OutputResultAlgorithm(QMainWindow):
    '''
    This class is responsible for the output of the result of the decryption/encryption algorithm.
    Instead of overwriting the result to a file, it outputs it.
    '''

    def __init__(self, parent_mainwindow, parent_mainwidget, *args, **kwargs):
        super().__init__(parent_mainwidget, *args, **kwargs)
        self.parent_mainwidget = parent_mainwidget
        self.parent_mainwindow = parent_mainwindow
        self.initUI()
        self.centerWindow()
        self.mainWidgets()

    # Parameters of main window.
    def initUI(self):
        self.setGeometry(300, 300, 1000, 500)
        # self.setWindowFlags(Qt.WindowContextHelpButtonHint)
        if self.parent_mainwidget.select_actions.currentText() == 'Encryption file':
            self.setWindowTitle('[Encrypt] — {} — MetrosCrypt (v. {}).'.format(
                self.parent_mainwidget.input_file.text(), __version__))
        elif self.parent_mainwidget.select_actions.currentText() == 'Decryption file':
            self.setWindowTitle('[Decrypt] — {} — MetrosCrypt (v. {}).'.format(
                self.parent_mainwidget.input_file.text(), __version__))

    # Centering window.
    def centerWindow(self):
        frame_geometry = self.frameGeometry()
        available_geometry = QDesktopWidget().availableGeometry().center()
        frame_geometry.moveCenter(available_geometry)
        self.move(frame_geometry.topLeft())

    # Main widgets of the current window.
    def mainWidgets(self):
        main_widget = QWidget()
        text_algorithm_result = QTextEdit(
            str(self.parent_mainwidget.result_algorithm))
        text_algorithm_result.setReadOnly(True)
        hbox = QHBoxLayout()
        hbox.addWidget(text_algorithm_result)
        main_widget.setLayout(hbox)
        self.setCentralWidget(main_widget)

    # Unlocking the main window after completing this.
    def closeEvent(self, event):
        self.parent_mainwindow.setEnabled(True)
        self.close()

    # Close the window with the escape button.
    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.close()


class Window(QWidget):
    '''
    The main widget of the window in which all the actions in the program take place.
    '''

    def __init__(self, parent_mainwindow, *args, **kwargs):
        super().__init__(parent_mainwindow, *args, **kwargs)
        self.parent_mainwindow = parent_mainwindow
        self.initializingWidget()

    # Initializing Window Widgets.
    def initializingWidget(self):
        self.select_actions = QComboBox()
        self.select_actions.setToolTip('''<p align="left">Select one option:<br><br>
  <b>Encryption file</b> — with this option, the contents of the input file will be encrypted and written to the output file.<br><br>
  <b>Decryption file</b> — is the same as encrypted file decryption only. You do not need to confirm the password for decryption.
</p>''')
        self.select_actions.addItems(['Encryption file', 'Decryption file'])
        self.select_actions.currentTextChanged.connect(self.changeActions)
        self.input_file = Input()
        self.input_file.setToolTip('''<p align="left">Enter the path to the input file or double-click on the input line. You can also click on the file selection button next to it.<br><br>
  If the program does not detect the input file, an error will be displayed:<br><br>
  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff0000">The <u>input</u> file could not be found...</font>
</p>''')
        self.input_file.setPlaceholderText(
            'Enter name of input file or click on button next to it...')
        self.input_file.clicked.connect(
            lambda: self.selectFile(self.input_file))
        self.button_input_file_select = QPushButton()
        self.button_input_file_select.setToolTip(
            '''<p align="left">Click to select the <u>input</u> file...</p>''')
        self.button_input_file_select.setIcon(
            self.style().standardIcon(QStyle.SP_FileIcon))
        self.button_input_file_select.clicked.connect(
            lambda: self.selectFile(self.input_file))
        hbox_input_file = QHBoxLayout()
        hbox_input_file.addWidget(self.input_file)
        hbox_input_file.addWidget(self.button_input_file_select)
        self.output_text = QLabel('Output file:')
        self.output_file = Input()
        self.output_file.setToolTip('''<p align="left">Enter the path to the output file or double-click on the input line. You can also click on the file selection button next to it.<br><br>
  If the program does not detect the output file, an error will be displayed:<br><br>
  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff0000">The <u>output</u> file could not be found...</font><br><br>
  If the input file field is empty, the program will request an action to replace the result in the input file.<br><br>
  If you ticked the output of the algorithm result, then the input file is simply not needed. The result is simply displayed in the window.
</p>''')
        self.output_file.setPlaceholderText(
            'Enter name of output file or click on button next to it...')
        self.output_file.clicked.connect(
            lambda: self.selectFile(self.output_file))
        self.button_output_file_select = QPushButton()
        self.button_output_file_select.setToolTip(
            '''<p align="left">Click to select the <u>output</u> file...</p>''')
        self.button_output_file_select.setIcon(
            self.style().standardIcon(QStyle.SP_FileIcon))
        self.button_output_file_select.clicked.connect(
            lambda: self.selectFile(self.output_file))
        hbox_output_file = QHBoxLayout()
        hbox_output_file.addWidget(self.output_file)
        hbox_output_file.addWidget(self.button_output_file_select)
        self.password = Password()
        self.password.setToolTip('''<p align="left">Enter the password for encryption/decryption.<br><br>
  If the password is incorrect or the file cannot be processed as encrypted or decrypted, an error is displayed:<br><br>
  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff0000">Apparently this file cannot be <u>encrypted</u>...</font><br>
  Or<br>
  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff0000">Apparently this file cannot be <u>decrypted</u>...</font>
</p>''')
        self.password.setPlaceholderText('Enter password...')
        self.password_confirm_text = QLabel('Confirm password:')
        self.password_confirm = Password()
        self.password_confirm.setToolTip('''<p align="left">Confirm the password to encrypt the file.<br>
  This line is needed to avoid problems. If the passwords in the fields do not match each other, an error will be displayed:<br><br>
  &nbsp;&nbsp;&nbsp;&nbsp;<font color="#ff0000">Passwords don\'t match...</font><br><br>
  And if you decrypt the file, there is no point in confirming the password, so the line will be blocked.
</p>''')
        self.password_confirm.setPlaceholderText('Confirm password...')
        self.output_result = QCheckBox(
            'Output result without replacing value in file.')
        self.output_result.setToolTip(
            '''<p align="left">If you enable this option for encrypted file or decryption, then the output file is not needed because the program takes the contents of the input file encrypts/decrypts and outputs the result in the window.</p>''')
        self.output_result.clicked.connect(self.changeOutputResult)
        self.error_message = QLabel('\t')
        self.error_message.setStyleSheet('color:#ff0000')
        self.grid = QGridLayout()
        self.grid.addWidget(QLabel('File Action'), 1, 0)
        self.grid.addWidget(self.select_actions, 1, 1)
        self.grid.addWidget(QLabel('Input file:'), 2, 0)
        self.grid.addLayout(hbox_input_file, 2, 1)
        self.grid.addWidget(self.output_text, 3, 0)
        self.grid.addLayout(hbox_output_file, 3, 1)
        self.grid.addWidget(QLabel('Password:'), 4, 0)
        self.grid.addWidget(self.password, 4, 1)
        self.grid.addWidget(self.password_confirm_text, 5, 0)
        self.grid.addWidget(self.password_confirm, 5, 1)
        self.grid.addWidget(self.output_result, 6, 1)
        self.grid.addWidget(self.error_message, 7, 1)
        self.button_decrypt_encrypt = QPushButton('&Encrypt')
        self.button_decrypt_encrypt.setToolTip(
            'Click to confirm the action...')
        self.button_decrypt_encrypt.clicked.connect(self.summingAction)
        button_cancel = QPushButton('&Cancel')
        button_cancel.setToolTip('Click to close the program window...')
        button_cancel.clicked.connect(lambda: sys.exit())
        hbox = QHBoxLayout()
        hbox.addStretch(1)
        hbox.addWidget(self.button_decrypt_encrypt)
        hbox.addWidget(button_cancel)
        vbox = QVBoxLayout()
        vbox.addStretch(1)
        vbox.addLayout(self.grid)
        vbox.addStretch(1)
        vbox.addLayout(hbox)
        self.setLayout(vbox)

    # The function will be called if the user changes the value of the list.
    # If the decryption option is selected, the password promotion widget will be blocked. 'he's not needed'.
    # Well, if encrypted, the password summing widget will be unlocked.
    def changeActions(self):
        if self.select_actions.currentText() == 'Encryption file':
            self.button_decrypt_encrypt.setText('&Encrypt')
            self.password_confirm_text.setEnabled(True)
            self.password_confirm.setEnabled(True)
        elif self.select_actions.currentText() == 'Decryption file':
            self.button_decrypt_encrypt.setText('&Decrypt')
            self.password_confirm_text.setDisabled(True)
            self.password_confirm.setDisabled(True)

    # The file selection function it accepts the widget after selecting file.
    # File replaces the text in the widget with the file name.
    def selectFile(self, widget):
        options_filedialog = QFileDialog.Options()
        options_filedialog |= QFileDialog.DontUseNativeDialog
        file_name, _ = QFileDialog.getOpenFileName(
            self, '', '', '', options=options_filedialog)
        if file_name:
            widget.setText(str(file_name))

    # When the checkbox is turned on and off, the lock/unlock 'widgets' action will occur.
    def changeOutputResult(self):
        if self.output_result.isChecked() == True:
            self.output_text.setDisabled(True)
            self.output_file.setDisabled(True)
            self.button_output_file_select.setEnabled(False)
        else:
            self.output_text.setEnabled(True)
            self.output_file.setEnabled(True)
            self.button_output_file_select.setEnabled(True)

    # Checking for a fool. :).
    def summingAction(self):
        self.error_message.setText('\t')
        if os.path.isfile(self.input_file.text()) == False:
            self.error_message.setText(
                'The <u>input</u> file could not be found...\t')
            return
        if self.select_actions.currentText() == 'Encryption file':
            if self.output_result.isChecked() == True:
                self.algorithmEncryptionDecryption(
                    action='encrypt', print_result=True)
            else:
                if self.password.text() != self.password_confirm.text():
                    self.error_message.setText('Passwords don\'t match...\t')
                    return
                self.algorithmEncryptionDecryption(action='encrypt')
        if self.select_actions.currentText() == 'Decryption file':
            if self.output_result.isChecked() == True:
                self.algorithmEncryptionDecryption(
                    action='decrypt', print_result=True)
            else:
                self.algorithmEncryptionDecryption(action='decrypt')

    '''
    The function takes 2 values 1 action if the action is equal to encryption, 
    then the file will be the result of the input file will be written to the output (if there is an output file).
    If the action is equal to decrypt, then everything will be the same.
    2 action if print result is false (by default, the value from the input file will be written to the output if print result is true, 
    instead of overwriting the value to the output file, it will output the result in the window.
    '''

    def algorithmEncryptionDecryption(self, action, print_result=False):
        if action == 'encrypt':
            self.result_algorithm = cryptocode.encrypt(
                open(self.input_file.text(), encoding='utf-8').read(), self.password.text())
            if self.result_algorithm == False:
                self.error_message.setText(
                    'Apparently this file cannot be <u>encrypted</u>...\t')
                return
        if action == 'decrypt':
            self.result_algorithm = cryptocode.decrypt(
                open(self.input_file.text(), encoding='utf-8').read(), self.password.text())
            if self.result_algorithm == False:
                self.error_message.setText(
                    'Apparently this file cannot be <u>decrypted</u>...\t')
                return
        if print_result == False:
            current_file = self.output_file.text()
            if self.output_file.text().replace(' ', '') == '':
                if self.dialogReplacingInputFileValue() == True:
                    current_file = self.input_file.text()
                else:
                    current_file = None
            if current_file != None:
                write_file = open(current_file, 'w+')
                write_file.write(self.result_algorithm)
                write_file.close()
        elif print_result == True:
            self.parent_mainwindow.setEnabled(False)
            OutputResultAlgorithm(self.parent_mainwindow, self).show()

    # A message window in case the program does not find the output file.
    def dialogReplacingInputFileValue(self):
        message = '''You left the <u>output</u> file field empty!<br>
Do you want to write the result to the <u>input</u> file?<br><br>
File: (<b>{}</b>).<br><br>
<b>Important if you overwrite the file, the previous value will not be returned.</b>'''.format(self.input_file.text())
        message_dialog = QMessageBox.question(
            self, 'MetrosCrypt', message, QMessageBox.Yes | QMessageBox.No)
        if message_dialog == QMessageBox.Yes:
            return True
        else:
            return False


class Application(QMainWindow):
    '''
    The main window of program in which window parameters 
    are initialized and main window widget is centered.
    '''

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.initUI()
        self.centerWindow()
        self.statusBarInit()
        self.centerWidgetInit()

    # Parameters of main window.
    def initUI(self):
        self.setWindowTitle('MetrosCrypt (v. {}).'.format(__version__))
        self.setWindowIcon(QIcon(IconBase64.iconWindow()))
        self.setGeometry(300, 300, 700, 200)
        self.setWindowFlags(Qt.CustomizeWindowHint |
                            Qt.WindowMinimizeButtonHint | Qt.WindowCloseButtonHint)

    # Centering window.
    def centerWindow(self):
        frame_geometry = self.frameGeometry()
        available_geometry = QDesktopWidget().availableGeometry().center()
        frame_geometry.moveCenter(available_geometry)
        self.move(frame_geometry.topLeft())

    # Initializing status bar and adding a header widget with a link to project repository.
    def statusBarInit(self):
        label_link_git = Label(
            'Github: <a href="https://github.com/John-MetrosSoftware/MetrosCrypt">MetrosCrypt</a><br>')
        label_link_git.setToolTip(
            '''<p align="left">You can find this project on github:<br>&nbsp;&nbsp;&nbsp;&nbsp;https://github.com/John-MetrosSoftware/MetrosCrypt</p>''')
        label_link_git.clicked.connect(lambda: webbrowser.open_new_tab(
            'https://github.com/John-MetrosSoftware/MetrosCrypt'))
        label_link_pypi = Label(
            'PyPi Algorithm: <a href="https://pypi.org/project/cryptocode/">Cryptocode</a><br>')
        label_link_pypi.setToolTip(
            '''<p align="left">This project used the key encryption/decryption algorithm of the cryptocode library.<br><br>The program is based on this algorithm!<br><br>PyPi:&nbsp;&nbsp;&nbsp;&nbsp;https://pypi.org/project/cryptocode/</p>''')
        label_link_pypi.clicked.connect(lambda: webbrowser.open_new_tab(
            'https://pypi.org/project/cryptocode/'))
        self.statusbar = self.statusBar()
        self.statusbar.addWidget(label_link_git)
        self.statusbar.addWidget(label_link_pypi)

    # Central window widget.
    def centerWidgetInit(self):
        self.setCentralWidget(Window(self))


if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    window = Application()
    window.show()
    app.exec_()
